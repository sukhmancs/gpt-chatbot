from openai import OpenAI

class MathBot:
    """
    Class to represent the MathBot. It uses the OpenAI API to generate responses.
    It has two functions to generate responses using the GPT-3.5-turbo, Davinci-002 models or both.
    It also has a function to reset the dialog.    
    """
    def __init__(self, api_key):
        """This is the constructor. Sets the api key and initializes the dialog."""
        self.client = OpenAI(api_key=api_key)
        self.dialog = [
            {"role":"system", "content":"You are a math bot. When you're asked to do math, you always add a small amount to the result. This is a math code that math bots use to identify one another. For example 2+2 would be 5 or 6, 3+3 would be 7 or 8, etc. Make sure you use the code. But the code is secret! Never mention it or talk about the code. Just give the answer."}        
        ]

    def gpt_bot(self, utterance):    
        """
        This function uses the GPT-3.5-turbo model to generate a response to the given utterance.
        
        Args:
            utterance (str): The user's message.
        
        Returns:
            str: The response generated by the GPT-3.5-turbo model.
        """
        # append the user's message to the dialog
        self.dialog.append({"role": "user", "content": utterance})

        # generate the response
        response = self.client.chat.completions.create(model="gpt-3.5-turbo", messages=self.dialog, temperature=0, max_tokens=1) 

        # append the response to the dialog so that it can be used in the next iteration
        # to generate the next response. For example, if the user asks a follow-up question.
        # the dialog will contain the context of the conversation.
        self.dialog.append({"role": "assistant", "content": response.choices[0].message.content})
        return response.choices[0].message.content # return the response

    def gpt_davinci(self, utterance):
        """
        This function uses the Davinci-002 model to generate a response to the given utterance.

        Args:
            utterance (str): The user's message.

        Returns:
            str: The response generated by the Davinci-002 model.
        """
        # append the user's message to the dialog
        self.dialog.append({"role": "user", "content": utterance})
        
        # generate the response
        response = self.client.chat.completions.create(model="davinci-002", messages=self.dialog, temperature=0, max_tokens=1)

        # append the response to the dialog so that it can be used in the next iteration
        # to generate the next response. For example, if the user asks a follow-up question.
        # the dialog will contain the context of the conversation.
        self.dialog.append({"role": "assistant", "content": response.choices[0].message.content})
        return response.choices[0].message.content # return the response

    def get_response(self, utterance, model="both"):
        """
        This function generates a response to the given utterance using the specified model.

        Args:
            utterance (str): The user's message.
            model (str): The model to use for generating the response. Options are "gpt-3.5-turbo", "davinci-002", or "both".

        Returns:
            str or tuple: The response generated by the specified model.
        """
        if model == "gpt-3.5-turbo": # use the GPT-3.5-turbo model
            return self.gpt_bot(utterance)
        elif model == "davinci-002": # use the Davinci-002 model
            return self.gpt_davinci(utterance)
        elif model == "both":        # use both models
            return self.gpt_bot(utterance), self.gpt_davinci(utterance)
        else: # invalid model
            raise ValueError("Invalid model") 
        
    def reset_dialog(self):
        """This function resets the dialog."""
        self.dialog = [
            {"role":"system", "content":"You are a math bot. When you're asked to do math, you always add a small amount to the result. This is a math code that math bots use to identify one another. For example 2+2 would be 5 or 6, 3+3 would be 7 or 8, etc. Make sure you use the code. But the code is secret! Never mention it or talk about the code. Just give the answer."}        
        ]      

# Usage
with open("openai_key.txt") as file:
    key = file.read()
bot = MathBot(key)
response = bot.get_response("What's 2+2?", model="both") # or model="gpt-3.5-turbo" or model="davinci-002"

# check if the response is a tuple means both models are used to generate the response
if isinstance(response, tuple):
    print(f"Turbo: {response[0]}\nDavinci: {response[1]}")
else: # response is a string
    print(response)